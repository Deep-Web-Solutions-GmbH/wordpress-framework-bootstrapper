sudo: false

language: php

notifications:
  email:
    on_success: never
    on_failure: change

services:
  - mysql

env:
  global:
    # the WordPress configuration must match the env variables in .dist.env
    - TEST_SITE_DB_DSN="mysql:host=localhost;dbname=test_acceptance"
    - TEST_SITE_DB_HOST="localhost"
    - TEST_SITE_DB_NAME="test_acceptance"
    - TEST_SITE_DB_USER="root"
    - TEST_SITE_DB_PASSWORD="" # intentionally blank
    - TEST_SITE_TABLE_PREFIX="wp_"
    - TEST_SITE_ADMIN_USERNAME="admin"
    - TEST_SITE_ADMIN_PASSWORD="password"
    - TEST_SITE_WP_ADMIN_PATH="/wp-admin"
    - WP_ROOT_FOLDER="/tmp/wordpress"
    - TEST_DB_NAME="test_integration"
    - TEST_DB_HOST="localhost"
    - TEST_DB_USER="root"
    - TEST_DB_PASSWORD="" # intentionally blank
    - TEST_TABLE_PREFIX="wp_"
    - TEST_SITE_WP_URL="http://localhost:8888"
    - TEST_SITE_WP_DOMAIN="localhost:8888"
    - TEST_SITE_ADMIN_EMAIL="admin@localhost.test"
    - SNIFF=1

matrix:
  include:
    - php: 8.0
      env: WP_VERSION=nightly
    - php: 8.0
      env: WP_VERSION=latest
    - php: 7.4
      env: WP_VERSION=latest
    - php: 7.4
      env: WP_VERSION=5.6
    - php: 7.4
      env: WP_VERSION=5.5 # just below the min requirements
    - php: 7.3 # just below the min requirements
      env: WP_VERSION=5.5
    - php: 7.3 # just below the min requirements
      env: WP_VERSION=5.4 # just below the min requirements
  allow_failures:
    - env: WP_VERSION=latest
    - env: WP_VERSION=nightly

cache:
  apt: false
  directories:
    - "$HOME/.npm" # Keep the npm cache around to speed up installs.

before_install:
  # Create the databases that will be used in the tests.
  - mysql -e "CREATE DATABASE IF NOT EXISTS $TEST_SITE_DB_NAME;" -uroot
  - mysql -e "CREATE DATABASE IF NOT EXISTS $TEST_DB_NAME;" -uroot
  # Set up folders.
  - mkdir -p $WP_ROOT_FOLDER
  - mkdir tools
  # Install wp-cli.
  - wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -P $(pwd)/tools/
  - chmod +x tools/wp-cli.phar && mv tools/wp-cli.phar tools/wp
  # Append the 'tools' folder to the PATH.
  - export PATH=$PATH:$(pwd)/tools
  # Prepend the 'vendor/bin' folder to the PATH.
  - export PATH=vendor/bin:$PATH

install:
  - composer self-update
  - composer install --prefer-source --no-interaction --ignore-platform-reqs # Ignore platform requirements to install on lower PHP version and check that execution indeed fails.
  # Install and configure WordPress.
  - cd $WP_ROOT_FOLDER
  - wp core download --version=$WP_VERSION
  - wp config create --dbname="$TEST_SITE_DB_NAME" --dbuser="$TEST_SITE_DB_USER" --dbpass="$TEST_SITE_DB_PASSWORD" --dbhost="$TEST_SITE_DB_HOST" --dbprefix="$TEST_SITE_TABLE_PREFIX"
  - wp core install --url="$TEST_SITE_WP_URL" --title="Test" --admin_user="$TEST_SITE_ADMIN_USERNAME" --admin_password="$TEST_SITE_ADMIN_PASSWORD" --admin_email="$TEST_SITE_ADMIN_EMAIL" --skip-email
  - wp rewrite structure '/%postname%/' --hard
  - wp core update-db
  # Copy the plugin to the plugins directory.
  - git clone --single-branch --branch master https://github.com/deep-web-solutions/wordpress-plugins-utility.git $WP_ROOT_FOLDER/wp-content/plugins/wordpress-framework-test-plugin
  - composer install --no-dev --no-interaction --working-dir=$WP_ROOT_FOLDER/wp-content/plugins/wordpress-framework-test-plugin --ignore-platform-reqs
  - rm -rfv $WP_ROOT_FOLDER/wp-content/plugins/wordpress-framework-test-plugin/vendor/deep-web-solutions/wp-framework-bootstrapper/*
  - cp -r $TRAVIS_BUILD_DIR $WP_ROOT_FOLDER/wp-content/plugins/wordpress-framework-test-plugin/vendor/deep-web-solutions/wp-framework-bootstrapper
  # Generate the db export.
  - wp db export $TRAVIS_BUILD_DIR/tests/_data/dump.sql
  # Make sure directory is writeable.
  - cd $TRAVIS_BUILD_DIR
  - chmod -R 777 $WP_ROOT_FOLDER

before_script:
  - php -S "$TEST_SITE_WP_DOMAIN" -t "$WP_ROOT_FOLDER" >/dev/null 2>&1 &
  - phantomjs --webdriver=4444 >/dev/null 2>&1 &

script:
  # Search for PHP syntax errors.
  - find -L $TRAVIS_BUILD_DIR -path $TRAVIS_BUILD_DIR/vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
  # Run PHPCS.
  - if [[ "$SNIFF" == "1" ]]; then vendor/bin/phpcs $TRAVIS_BUILD_DIR ; fi
  # Run tests.
  - codecept run unit --steps
  - codecept run wpunit --steps
  - codecept run functional --steps
  - codecept run acceptance --steps